// Copyright (c) 2023 Alan Parra
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// Code generated by ./internal/cmd/generate. DO NOT EDIT.

package semerr

var errFromCode = map[Code]func(error) error{
	1:  func(err error) error { return CanceledError{err} },
	2:  func(err error) error { return UnknownError{err} },
	3:  func(err error) error { return InvalidArgumentError{err} },
	4:  func(err error) error { return DeadlineExceededError{err} },
	5:  func(err error) error { return NotFoundError{err} },
	6:  func(err error) error { return AlreadyExistsError{err} },
	7:  func(err error) error { return PermissionDeniedError{err} },
	8:  func(err error) error { return ResourceExhaustedError{err} },
	9:  func(err error) error { return FailedPreconditionError{err} },
	10: func(err error) error { return AbortedError{err} },
	11: func(err error) error { return OutOfRangeError{err} },
	12: func(err error) error { return UnimplementedError{err} },
	13: func(err error) error { return InternalError{err} },
	14: func(err error) error { return UnavailableError{err} },
	15: func(err error) error { return DataLossError{err} },
	16: func(err error) error { return UnauthenticatedError{err} },
}

var errFromStatus = map[int]func(error) error{
	499: func(err error) error { return CanceledError{err} },
	// 500: func(err error) error { return UnknownError{err} },
	400: func(err error) error { return InvalidArgumentError{err} },
	504: func(err error) error { return DeadlineExceededError{err} },
	404: func(err error) error { return NotFoundError{err} },
	409: func(err error) error { return AlreadyExistsError{err} },
	403: func(err error) error { return PermissionDeniedError{err} },
	429: func(err error) error { return ResourceExhaustedError{err} },
	// 400: func(err error) error { return FailedPreconditionError{err} },
	// 409: func(err error) error { return AbortedError{err} },
	// 400: func(err error) error { return OutOfRangeError{err} },
	501: func(err error) error { return UnimplementedError{err} },
	500: func(err error) error { return InternalError{err} },
	503: func(err error) error { return UnavailableError{err} },
	// 500: func(err error) error { return DataLossError{err} },
	401: func(err error) error { return UnauthenticatedError{err} },
}

// CanceledError is the semantic error for Canceled.
type CanceledError struct{ Err error }

// Error returns Err.Error() or "canceled".
func (e CanceledError) Error() string {
	if e.Err == nil {
		return "canceled"
	}
	return e.Err.Error()
}

// Unwrap returns Err.
func (e CanceledError) Unwrap() error { return e.Err }

// GRPCCode returns Canceled.
func (CanceledError) GRPCCode() Code { return 1 }

// HTTPStatus returns 499.
func (CanceledError) HTTPStatus() int { return 499 }

// UnknownError is the semantic error for Unknown.
type UnknownError struct{ Err error }

// Error returns Err.Error() or "unknown".
func (e UnknownError) Error() string {
	if e.Err == nil {
		return "unknown"
	}
	return e.Err.Error()
}

// Unwrap returns Err.
func (e UnknownError) Unwrap() error { return e.Err }

// GRPCCode returns Unknown.
func (UnknownError) GRPCCode() Code { return 2 }

// HTTPStatus returns 500.
func (UnknownError) HTTPStatus() int { return 500 }

// InvalidArgumentError is the semantic error for InvalidArgument.
type InvalidArgumentError struct{ Err error }

// Error returns Err.Error() or "invalid argument".
func (e InvalidArgumentError) Error() string {
	if e.Err == nil {
		return "invalid argument"
	}
	return e.Err.Error()
}

// Unwrap returns Err.
func (e InvalidArgumentError) Unwrap() error { return e.Err }

// GRPCCode returns InvalidArgument.
func (InvalidArgumentError) GRPCCode() Code { return 3 }

// HTTPStatus returns 400.
func (InvalidArgumentError) HTTPStatus() int { return 400 }

// DeadlineExceededError is the semantic error for DeadlineExceeded.
type DeadlineExceededError struct{ Err error }

// Error returns Err.Error() or "deadline exceeded".
func (e DeadlineExceededError) Error() string {
	if e.Err == nil {
		return "deadline exceeded"
	}
	return e.Err.Error()
}

// Unwrap returns Err.
func (e DeadlineExceededError) Unwrap() error { return e.Err }

// GRPCCode returns DeadlineExceeded.
func (DeadlineExceededError) GRPCCode() Code { return 4 }

// HTTPStatus returns 504.
func (DeadlineExceededError) HTTPStatus() int { return 504 }

// NotFoundError is the semantic error for NotFound.
type NotFoundError struct{ Err error }

// Error returns Err.Error() or "not found".
func (e NotFoundError) Error() string {
	if e.Err == nil {
		return "not found"
	}
	return e.Err.Error()
}

// Unwrap returns Err.
func (e NotFoundError) Unwrap() error { return e.Err }

// GRPCCode returns NotFound.
func (NotFoundError) GRPCCode() Code { return 5 }

// HTTPStatus returns 404.
func (NotFoundError) HTTPStatus() int { return 404 }

// AlreadyExistsError is the semantic error for AlreadyExists.
type AlreadyExistsError struct{ Err error }

// Error returns Err.Error() or "already exists".
func (e AlreadyExistsError) Error() string {
	if e.Err == nil {
		return "already exists"
	}
	return e.Err.Error()
}

// Unwrap returns Err.
func (e AlreadyExistsError) Unwrap() error { return e.Err }

// GRPCCode returns AlreadyExists.
func (AlreadyExistsError) GRPCCode() Code { return 6 }

// HTTPStatus returns 409.
func (AlreadyExistsError) HTTPStatus() int { return 409 }

// PermissionDeniedError is the semantic error for PermissionDenied.
type PermissionDeniedError struct{ Err error }

// Error returns Err.Error() or "permission denied".
func (e PermissionDeniedError) Error() string {
	if e.Err == nil {
		return "permission denied"
	}
	return e.Err.Error()
}

// Unwrap returns Err.
func (e PermissionDeniedError) Unwrap() error { return e.Err }

// GRPCCode returns PermissionDenied.
func (PermissionDeniedError) GRPCCode() Code { return 7 }

// HTTPStatus returns 403.
func (PermissionDeniedError) HTTPStatus() int { return 403 }

// ResourceExhaustedError is the semantic error for ResourceExhausted.
type ResourceExhaustedError struct{ Err error }

// Error returns Err.Error() or "resource exhausted".
func (e ResourceExhaustedError) Error() string {
	if e.Err == nil {
		return "resource exhausted"
	}
	return e.Err.Error()
}

// Unwrap returns Err.
func (e ResourceExhaustedError) Unwrap() error { return e.Err }

// GRPCCode returns ResourceExhausted.
func (ResourceExhaustedError) GRPCCode() Code { return 8 }

// HTTPStatus returns 429.
func (ResourceExhaustedError) HTTPStatus() int { return 429 }

// FailedPreconditionError is the semantic error for FailedPrecondition.
type FailedPreconditionError struct{ Err error }

// Error returns Err.Error() or "failed precondition".
func (e FailedPreconditionError) Error() string {
	if e.Err == nil {
		return "failed precondition"
	}
	return e.Err.Error()
}

// Unwrap returns Err.
func (e FailedPreconditionError) Unwrap() error { return e.Err }

// GRPCCode returns FailedPrecondition.
func (FailedPreconditionError) GRPCCode() Code { return 9 }

// HTTPStatus returns 400.
func (FailedPreconditionError) HTTPStatus() int { return 400 }

// AbortedError is the semantic error for Aborted.
type AbortedError struct{ Err error }

// Error returns Err.Error() or "aborted".
func (e AbortedError) Error() string {
	if e.Err == nil {
		return "aborted"
	}
	return e.Err.Error()
}

// Unwrap returns Err.
func (e AbortedError) Unwrap() error { return e.Err }

// GRPCCode returns Aborted.
func (AbortedError) GRPCCode() Code { return 10 }

// HTTPStatus returns 409.
func (AbortedError) HTTPStatus() int { return 409 }

// OutOfRangeError is the semantic error for OutOfRange.
type OutOfRangeError struct{ Err error }

// Error returns Err.Error() or "out of range".
func (e OutOfRangeError) Error() string {
	if e.Err == nil {
		return "out of range"
	}
	return e.Err.Error()
}

// Unwrap returns Err.
func (e OutOfRangeError) Unwrap() error { return e.Err }

// GRPCCode returns OutOfRange.
func (OutOfRangeError) GRPCCode() Code { return 11 }

// HTTPStatus returns 400.
func (OutOfRangeError) HTTPStatus() int { return 400 }

// UnimplementedError is the semantic error for Unimplemented.
type UnimplementedError struct{ Err error }

// Error returns Err.Error() or "unimplemented".
func (e UnimplementedError) Error() string {
	if e.Err == nil {
		return "unimplemented"
	}
	return e.Err.Error()
}

// Unwrap returns Err.
func (e UnimplementedError) Unwrap() error { return e.Err }

// GRPCCode returns Unimplemented.
func (UnimplementedError) GRPCCode() Code { return 12 }

// HTTPStatus returns 501.
func (UnimplementedError) HTTPStatus() int { return 501 }

// InternalError is the semantic error for Internal.
type InternalError struct{ Err error }

// Error returns Err.Error() or "internal".
func (e InternalError) Error() string {
	if e.Err == nil {
		return "internal"
	}
	return e.Err.Error()
}

// Unwrap returns Err.
func (e InternalError) Unwrap() error { return e.Err }

// GRPCCode returns Internal.
func (InternalError) GRPCCode() Code { return 13 }

// HTTPStatus returns 500.
func (InternalError) HTTPStatus() int { return 500 }

// UnavailableError is the semantic error for Unavailable.
type UnavailableError struct{ Err error }

// Error returns Err.Error() or "unavailable".
func (e UnavailableError) Error() string {
	if e.Err == nil {
		return "unavailable"
	}
	return e.Err.Error()
}

// Unwrap returns Err.
func (e UnavailableError) Unwrap() error { return e.Err }

// GRPCCode returns Unavailable.
func (UnavailableError) GRPCCode() Code { return 14 }

// HTTPStatus returns 503.
func (UnavailableError) HTTPStatus() int { return 503 }

// DataLossError is the semantic error for DataLoss.
type DataLossError struct{ Err error }

// Error returns Err.Error() or "data loss".
func (e DataLossError) Error() string {
	if e.Err == nil {
		return "data loss"
	}
	return e.Err.Error()
}

// Unwrap returns Err.
func (e DataLossError) Unwrap() error { return e.Err }

// GRPCCode returns DataLoss.
func (DataLossError) GRPCCode() Code { return 15 }

// HTTPStatus returns 500.
func (DataLossError) HTTPStatus() int { return 500 }

// UnauthenticatedError is the semantic error for Unauthenticated.
type UnauthenticatedError struct{ Err error }

// Error returns Err.Error() or "unauthenticated".
func (e UnauthenticatedError) Error() string {
	if e.Err == nil {
		return "unauthenticated"
	}
	return e.Err.Error()
}

// Unwrap returns Err.
func (e UnauthenticatedError) Unwrap() error { return e.Err }

// GRPCCode returns Unauthenticated.
func (UnauthenticatedError) GRPCCode() Code { return 16 }

// HTTPStatus returns 401.
func (UnauthenticatedError) HTTPStatus() int { return 401 }
